// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using FiscalModel;
//
//    var customerModel = CustomerModel.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace FiscalModel
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    public partial class CustomerModel
    {
        [JsonPropertyName("protoVersion")]
        public string ProtoVersion { get; set; }

        [JsonPropertyName("IDZ")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Idz { get; set; }

        [JsonPropertyName("deviceType")]
        public long DeviceType { get; set; }

        [JsonPropertyName("printed")]
        public bool Printed { get; set; }

        [JsonPropertyName("data")]
        public string Data { get; set; }

        [JsonPropertyName("header")]
        public Header[] Header { get; set; }

        [JsonPropertyName("body")]
        public Body[] Body { get; set; }

        [JsonPropertyName("sign")]
        public string Sign { get; set; }
    }

    public partial class Body
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sellLine")]
        public SellLine SellLine { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("discountLine")]
        public Discount DiscountLine { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("advance")]
        public Advance Advance { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("discountVat")]
        public Discount DiscountVat { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("discountBill")]
        public Discount DiscountBill { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("discountSummary")]
        public DiscountSummary DiscountSummary { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("vatSummary")]
        public VatSummary VatSummary { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sumInCurrency")]
        public SumInCurrency SumInCurrency { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("section")]
        public Section Section { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pack")]
        public Pack Pack { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("payment")]
        public Payment Payment { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("currencyPayment")]
        public CurrencyPayment CurrencyPayment { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("rest")]
        public Payment Rest { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("fiscalFooter")]
        public FiscalFooter FiscalFooter { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("addLine")]
        public AddLine AddLine { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("infoLine")]
        public AddLine InfoLine { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("barcode")]
        public Barcode Barcode { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sysNumber")]
        public AddLine SysNumber { get; set; }
    }

    public partial class AddLine
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("id")]
        public long? Id { get; set; }

        [JsonPropertyName("data")]
        public string Data { get; set; }

        [JsonPropertyName("width")]
        public long Width { get; set; }

        [JsonPropertyName("CPS")]
        public long Cps { get; set; }
    }

    public partial class Advance
    {
        [JsonPropertyName("plu")]
        public string Plu { get; set; }

        [JsonPropertyName("vatId")]
        public VatId VatId { get; set; }

        [JsonPropertyName("isStorno")]
        public bool IsStorno { get; set; }

        [JsonPropertyName("baseValue")]
        public long BaseValue { get; set; }

        [JsonPropertyName("value")]
        public long Value { get; set; }
    }

    public partial class Barcode
    {
        [JsonPropertyName("id")]
        public long Id { get; set; }

        [JsonPropertyName("data")]
        public string Data { get; set; }
    }

    public partial class CurrencyPayment
    {
        [JsonPropertyName("currencyAmount")]
        public long CurrencyAmount { get; set; }

        [JsonPropertyName("rate")]
        public long Rate { get; set; }

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("amount")]
        public long Amount { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }
    }

    public partial class Discount
    {
        [JsonPropertyName("base")]
        public long Base { get; set; }

        [JsonPropertyName("value")]
        public long Value { get; set; }

        [JsonPropertyName("isDiscount")]
        public bool IsDiscount { get; set; }

        [JsonPropertyName("isPercent")]
        public bool IsPercent { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("isStorno")]
        public bool IsStorno { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("perVat")]
        public PerVat[] PerVat { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("vatId")]
        public VatId? VatId { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("percent")]
        public long? Percent { get; set; }
    }

    public partial class PerVat
    {
        [JsonPropertyName("vatId")]
        public VatId VatId { get; set; }

        [JsonPropertyName("value")]
        public long Value { get; set; }
    }

    public partial class DiscountSummary
    {
        [JsonPropertyName("discounts")]
        public long Discounts { get; set; }

        [JsonPropertyName("surcharges")]
        public long Surcharges { get; set; }
    }

    public partial class FiscalFooter
    {
        [JsonPropertyName("billNumber")]
        public long BillNumber { get; set; }

        [JsonPropertyName("uniqueNumber")]
        public string UniqueNumber { get; set; }

        [JsonPropertyName("cashNumber")]
        public string CashNumber { get; set; }

        [JsonPropertyName("cashier")]
        public string Cashier { get; set; }

        [JsonPropertyName("CPS")]
        public long Cps { get; set; }

        [JsonPropertyName("date")]
        public DateTimeOffset Date { get; set; }
    }

    public partial class Pack
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("price")]
        public long Price { get; set; }

        [JsonPropertyName("quantity")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Quantity { get; set; }

        [JsonPropertyName("total")]
        public long Total { get; set; }

        [JsonPropertyName("isNegative")]
        public bool IsNegative { get; set; }
    }

    public partial class Payment
    {
        [JsonPropertyName("type")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Type { get; set; }

        [JsonPropertyName("amount")]
        public long Amount { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("name")]
        public string Name { get; set; }
    }

    public partial class Section
    {
        [JsonPropertyName("type")]
        public long Type { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("amount")]
        public long? Amount { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("currency")]
        public string Currency { get; set; }
    }

    public partial class SellLine
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("vatId")]
        public VatId VatId { get; set; }

        [JsonPropertyName("price")]
        public long Price { get; set; }

        [JsonPropertyName("total")]
        public long Total { get; set; }

        [JsonPropertyName("quantity")]
        public string Quantity { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("desc")]
        public string Desc { get; set; }

        [JsonPropertyName("isStorno")]
        public bool IsStorno { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("unit")]
        public string Unit { get; set; }
    }

    public partial class SumInCurrency
    {
        [JsonPropertyName("fiscalTotal")]
        public long FiscalTotal { get; set; }

        [JsonPropertyName("totalWithPacks")]
        public long TotalWithPacks { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("printBig")]
        public bool PrintBig { get; set; }

        [JsonPropertyName("printable")]
        public bool Printable { get; set; }
    }

    public partial class VatSummary
    {
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("vatRatesSummary")]
        public VatRatesSummary[] VatRatesSummary { get; set; }
    }

    public partial class VatRatesSummary
    {
        [JsonPropertyName("vatId")]
        public VatId VatId { get; set; }

        [JsonPropertyName("vatRate")]
        public long VatRate { get; set; }

        [JsonPropertyName("vatSale")]
        public long VatSale { get; set; }

        [JsonPropertyName("vatAmount")]
        public long VatAmount { get; set; }
    }

    public partial class Header
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("headerText")]
        public HeaderText HeaderText { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("headerData")]
        public HeaderData HeaderData { get; set; }
    }

    public partial class HeaderData
    {
        [JsonPropertyName("tin")]
        public string Tin { get; set; }

        [JsonPropertyName("docNumber")]
        public long DocNumber { get; set; }

        [JsonPropertyName("date")]
        public DateTimeOffset Date { get; set; }

        [JsonPropertyName("CPS")]
        public long Cps { get; set; }
    }

    public partial class HeaderText
    {
        [JsonPropertyName("headerTextLines")]
        public string HeaderTextLines { get; set; }
    }

    public enum VatId { A, B, C };

    public partial class CustomerModel
    {
        public static CustomerModel FromJson(string json) => JsonSerializer.Deserialize<CustomerModel>(json, FiscalModel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CustomerModel self) => JsonSerializer.Serialize(self, FiscalModel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                VatIdConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class ParseStringConverter : JsonConverter<long>
    {
        public override bool CanConvert(Type t) => t == typeof(long);

        public override long Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void Write(Utf8JsonWriter writer, long value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value.ToString(), options);
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class VatIdConverter : JsonConverter<VatId>
    {
        public override bool CanConvert(Type t) => t == typeof(VatId);

        public override VatId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "A":
                    return VatId.A;
                case "B":
                    return VatId.B;
                case "C":
                    return VatId.C;
            }
            throw new Exception("Cannot unmarshal type VatId");
        }

        public override void Write(Utf8JsonWriter writer, VatId value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case VatId.A:
                    JsonSerializer.Serialize(writer, "A", options);
                    return;
                case VatId.B:
                    JsonSerializer.Serialize(writer, "B", options);
                    return;
                case VatId.C:
                    JsonSerializer.Serialize(writer, "C", options);
                    return;
            }
            throw new Exception("Cannot marshal type VatId");
        }

        public static readonly VatIdConverter Singleton = new VatIdConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
